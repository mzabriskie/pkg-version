#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var argv = require('minimist')(process.argv.slice(2));

/**
 * Find all the dependencies for a part of a package
 *
 * @param {String} dir The directory specified by the user
 * @param {Object} part The part of the package to search (dependencies, peerDependencies, etc)
 * @return {Array} List of dependencies (name, wanted, and actual version)
 */
function findDeps(dir, part) {
  var packages = [];
  if (!part || typeof part !== 'object') {
    return packages;
  }

  Object.keys(part).forEach(function (pkg) {
    packages.push({
      name: pkg,
      wantedVersion: part[pkg],
      actualVersion: getActualVersion(dir, pkg)
    });
  });

  return packages;
}

/**
 * Get the actual installed version of a dependency
 *
 * @param {String} dir The directory specified by the user
 * @param {String} name The name of the dependency
 * @return {String} The actual installed version
 */
function getActualVersion(dir, name) {
  var version = '';
  var pathLoaders = [
    // Check in directory requested
    function () {
      return path.resolve(dir, name, 'package.json');
    },
    
    // Check in parent directory for case of peerDependencies
    function () {
      return path.resolve(dir, '../..', name, 'package.json');
    },

    // Check further up the tree
    function () {
      return require.resolve(name).replace(new RegExp(name + '.*'), name + '/package.json');
    }
  ];

  for (var i=0, l=pathLoaders.length; i<l; i++) {
    var p;
    try {
      p = pathLoaders[i]();
    } catch (e) {
      // require.resolve will fail if module can't be found
    }

    if (p && fs.existsSync(p)) {
      version = require(p).version;
      break;
    }
  }

  return version;
}

/**
 * Create String of padded whitespace
 *
 * @param {String} content The content to be padded
 * @param {Number} count The max number of characters that are needed
 * @return {String}
 */
function pad(content, count) {
  return Array((count - content.length) + 1).join(' ');
}

/**
 * Create underlined text
 *
 * @param {String} text The text to underline
 * @return {String}
 */
function underline(text) {
  return '\033[4m' + text + '\033[0m';
}

/**
 * Highlight the diff between to versions
 *
 * @param {String} a The primary version to be compared against
 * @param {String} b The secondary version
 * @return {String}
 */
function highlightDiff(a, b) {
  var text = '';
  var partsA = a.split('');
  var partsB = b.split('');

  // Get rid of any semver stuff (~, ^, etc.)
  while (partsA[0] && isNaN(parseInt(partsA[0], 10))) {
    partsA.shift();
  }

  for (var i=0, l=partsA.length; i<l; i++) {
    // If versions still line up shift the char from b
    if (partsA[i] === partsB[0]) {
      text += partsB.shift();
    }
    // As soon as they no longer match, we're done here
    else {
      break;
    }
  }
  
  // If anything is left in b, then it is different from a from here on out
  if (partsB.length) {
    text += '\033[0;35m';
    text += partsB.join('');
    text += '\033[0m';
  }

  return text;
}

// Show help
if (argv.h || argv.help) {
  console.log('Usage: pkg-version [<folder>] [<options>]');
  console.log('');
  console.log('Options:');
  console.log('  -a           Include all dependencies (default).');
  console.log('  -s           Include all dependencies that appear in dependencies.');
  console.log('  -d           Include all dependencies that appear in devDependencies.');
  console.log('  -p           Include all dependencies that appear in peerDependencies.');
  console.log('');
  console.log('  --help       Print usage and options.');
  console.log('  --version    Print current version.');
}
// Show version
else if (argv.v || argv.version) {
  console.log(require(path.resolve(__dirname, '../package.json')).version);
}
// Main program
else {
(function () {
  var dir = argv._[0] || process.cwd();

  // Normalize options
  argv.a = argv.a || (!argv.s && !argv.d && !argv.p);
  
  // Make sure path ends with node_modules/ (prefer it not be passed as arg)
  if (!/\/$/.test(dir)) {
    dir += '/';
  }
  if (!/node_modules\/$/.test(dir)) {
    dir += 'node_modules/';
  }

  // Find all dependencies
  var masterPkg = require(path.resolve(dir, '../package.json'));
  var packages = [];
  if (argv.a || argv.s) {
    Array.prototype.push.apply(packages, findDeps(dir, masterPkg.dependencies));
  }
  if (argv.a || argv.d) {
    Array.prototype.push.apply(packages, findDeps(dir, masterPkg.devDependencies));
  }
  if (argv.a || argv.p) {
    Array.prototype.push.apply(packages, findDeps(dir, masterPkg.peerDependencies));
  }

  // Calculate widths
  var header = ['Package', 'Wanted', 'Actual'];
  var widths = [header[0].length, header[1].length, header[2].length];
  for (var i=0, l=packages.length; i<l; i++) {
    var pkg = packages[i];
    widths[0] = Math.max(widths[0], pkg.name.length);
    widths[1] = Math.max(widths[1], pkg.wantedVersion.length);
    widths[2] = Math.max(widths[2], pkg.actualVersion.length);
  }

  // Render
  if (packages.length > 0) {
    console.log(
      underline(header[0]), pad(header[0], widths[0]),
      pad(header[1], widths[1]), underline(header[1]),
      pad(header[2], widths[2]), underline(header[2])
    );

    for (var i=0, l=packages.length; i<l; i++) {
      var pkg = packages[i];
      console.log(
        pkg.name, pad(pkg.name, widths[0]),
        pad(pkg.wantedVersion, widths[1]), pkg.wantedVersion,
        pad(pkg.actualVersion, widths[2]), highlightDiff(
          pkg.wantedVersion,
          pkg.actualVersion
        )
      );
    }
  }
})();
}
